declare class export_default$7{
    private _Core;
    private _attributes;
    constructor(Core: export_default$1);
    createAttribute(name: string, callback: (element: HTMLElement, value: string) => any, update?: boolean): void;
    deleteAttribute(name: string, update?: boolean): void;
    deleteAllAttributes(update?: boolean): void;
    getAttribute(name: string): undefined | ((element: HTMLElement, value: string) => any);
}

declare class export_default$6{
    private _listeners;
    listen(target: any, name: string, callback: (...args: any) => any, options?: {
        tag?: string;
        once?: boolean;
    }): string;
    removeListener(id: string): void;
    removeAllListeners(): void;
    findListeners(target: any, query: {
        name?: string;
        tag?: string;
    }): string[];
}

declare class export_default$5{
    private _interval;
    private _timers;
    createTimeout(ms: number, callback: () => any): string;
    createInterval(interval: number, callback: (count?: number) => any): string;
    createLoop(times: number, interval: number, callback: (count?: number) => any, callback2?: () => any): string;
    deleteTimer(id: string): void;
    deleteAllTimers(): void;
    private _start;
}

declare class export_default$4{
    static createStyle(style: string, type: string, idFormat: string): string;
    static updateStyles(): void;
}

declare class export_default$3{
    private _Core;
    private _units;
    constructor(Core: export_default$1);
    createUnit(name: string, callback: (value: string) => string, update?: boolean): void;
    deleteUnit(name: string, update?: boolean): void;
    deleteAllUnits(update?: boolean): void;
    parseStyleValue(value: string): string;
}

declare class export_default$2{
    private _Core;
    observer: MutationObserver;
    constructor(Core: export_default$1);
    checkChildren(parent: HTMLElement): void;
    checkAttributes(element: HTMLElement, attributeName?: string): void;
}

declare class export_default$1{
    private _id;
    private _element;
    private _API;
    componentPath: string;
    data: any;
    ListenerManager: export_default$6;
    TimerManager: export_default$5;
    AttributeManager: export_default$7;
    UnitManager: export_default$3;
    Observer: export_default$2;
    PluginManager: typeof PluginManager;
    ComponentManager: typeof export_default;
    StyleManager: typeof export_default$4;
    constructor(API: Light, element: HTMLElement, data: any);
    get id(): string | undefined;
    get element(): HTMLElement;
    get API(): Light;
    getElementByID(id: string): undefined | HTMLElement;
    getElementsByClassName(className: string): HTMLElement[];
    getElementsByTagName(tagName: string): HTMLElement[];
    getAllElements(): HTMLElement[];
    load(html: string, componentPath?: string): Promise<void>;
    remove(): void;
}

declare class export_default{
    static registerComponent(Core: export_default$1): string;
    static unregisterComponent(id: string): void;
    static getComponent(id: string): undefined | export_default$1;
    static getAllComponents(): export_default$1[];
    static getComponentFromParent(element: HTMLElement): undefined | string;
}

interface Condition {
    type?: Types[];
    value?: string[];
    instanceOf?: {
        instance: any;
        name: string;
    };
}
type Types = 'boolean' | 'number' | 'bigint' | 'null' | 'undefined' | 'string' | 'symbol' | 'array' | 'object' | 'function';

declare const _default: {
    checkParameters: (conditions: {
        [key: string]: Condition;
    }, parameters: {
        [key: string]: any;
    }) => void;
    checkObject: (objectName: string, conditions: {
        [key: string]: Condition;
    }, object: {
        [key: string]: any;
    }) => void;
    generateID: (length: number, keys: string[]) => string;
};

declare class PluginManager {
    static get plugin(): string[];
    static addPlugin(Plugin: Plugin): void;
    static removePlugin(id: string): void;
    static initializePlugins(Core: export_default$1): void;
}
interface Plugin {
    id: string;
    register?: (API: typeof Light, Utilities: Utilities) => any;
    init?: (Core: export_default$1) => any;
}
interface Utilities {
    PluginManager: typeof PluginManager;
    ComponentManager: typeof export_default;
    Tools: typeof _default;
}

declare function createElement(tagName: ElementTags, attributes?: ElementAttributes, children?: HTMLElement[]): HTMLElement;
declare function createSvgElement(src: string, attributes?: ElementAttributes, wait?: true): HTMLElement;
declare function createSvgElement(src: string, attributes?: ElementAttributes, wait?: false): Promise<HTMLElement>;
type ElementTags = 'a' | 'abbr' | 'address' | 'area' | 'article' | 'aside' | 'audio' | 'b' | 'base' | 'bdi' | 'bdo' | 'blockquote' | 'body' | 'br' | 'button' | 'canvas' | 'caption' | 'cite' | 'code' | 'col' | 'colgroup' | 'data' | 'datalist' | 'dd' | 'del' | 'details' | 'dfn' | 'dialog' | 'div' | 'dl' | 'dt' | 'em' | 'embed' | 'fieldset' | 'figcaption' | 'figure' | 'footer' | 'form' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'head' | 'header' | 'hgroup' | 'hr' | 'html' | 'i' | 'iframe' | 'img' | 'input' | 'ins' | 'kdb' | 'label' | 'legend' | 'li' | 'link' | 'main' | 'map' | 'mark' | 'menu' | 'meta' | 'meter' | 'nav' | 'noscript' | 'object' | 'ol' | 'optgroupt' | 'option' | 'output' | 'p' | 'param' | 'picture' | 'pre' | 'progress' | 'q' | 'rp' | 'rt' | 'ruby' | 's' | 'samp' | 'script' | 'search' | 'section' | 'select' | 'small' | 'source' | 'span' | 'strong' | 'style' | 'sub' | 'summary' | 'sup' | 'svg' | 'table' | 'tbody' | 'td' | 'template' | 'textarea' | 'tfoot' | 'th' | 'thead' | 'time' | 'title' | 'tr' | 'track' | 'u' | 'ul' | 'var' | 'video' | 'wbr' | string;
interface ElementAttributes {
    innerHTML?: string;
    accept?: string;
    'accept-charset'?: string;
    accesskey?: string;
    action?: string;
    alt?: string;
    async?: string;
    autocomplete?: string;
    autofocus?: string;
    autoplay?: string;
    bgcolor?: string;
    border?: string;
    charset?: string;
    checked?: string;
    cite?: string;
    class?: string;
    cols?: string;
    colspan?: string;
    content?: string;
    contenteditable?: string;
    controls?: string;
    coords?: string;
    data?: string;
    datetime?: string;
    default?: string;
    defer?: string;
    dir?: string;
    dirname?: string;
    disabled?: string;
    download?: string;
    draggable?: string;
    enctype?: string;
    enterkeyhint?: string;
    for?: string;
    form?: string;
    formaction?: string;
    headers?: string;
    height?: string;
    hidden?: string;
    high?: string;
    href?: string;
    hreflang?: string;
    'http-equiv'?: string;
    id?: string;
    inert?: string;
    inputmode?: string;
    ismap?: string;
    kind?: string;
    label?: string;
    lang?: string;
    list?: string;
    loop?: string;
    low?: string;
    max?: string;
    maxlength?: string;
    media?: string;
    method?: string;
    min?: string;
    multiple?: string;
    muted?: string;
    name?: string;
    novalidate?: string;
    open?: string;
    optimum?: string;
    pattern?: string;
    placeholder?: string;
    popover?: string;
    popovertarget?: string;
    popovertargetaction?: string;
    poster?: string;
    preload?: string;
    readonly?: string;
    rel?: string;
    required?: string;
    reversed?: string;
    rows?: string;
    rowspan?: string;
    sandbox?: string;
    scope?: string;
    selected?: string;
    shape?: string;
    size?: string;
    sizes?: string;
    span?: string;
    spellcheck?: string;
    src?: string;
    srcdoc?: string;
    srclang?: string;
    start?: string;
    step?: string;
    style?: string;
    tabindex?: string;
    target?: string;
    title?: string;
    translate?: string;
    type?: string;
    usemap?: string;
    value?: string;
    width?: string;
    wrap?: string;
    [key: string]: undefined | string;
}

declare function createStyle(properties: CssProperties): string;
interface CssProperties {
    accentColor?: string;
    alignContent?: 'stretch' | 'center' | 'flex-start' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly' | 'initial' | 'inherit';
    alignItems?: 'normal' | 'stretch' | 'center' | 'flex-start' | 'flex-end' | 'start' | 'end' | 'baseline' | 'initial' | 'inherit';
    alignSelf?: 'auto' | 'stretch' | 'center' | 'flex-start' | 'flex-end' | 'baseline' | 'initial' | 'inherit';
    all?: 'initial' | 'inherit' | 'unset';
    animation?: string;
    animationDelay?: string;
    animationDirection?: string;
    animationFillMode?: 'none' | 'forwards' | 'backwards' | 'both' | 'initial' | 'inherit';
    animationIterationCount?: string;
    animationName?: string;
    animationPlayState?: 'paused' | 'running' | 'initial' | 'inherit';
    animationTimingFunction?: 'linear' | 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'step-start' | 'step-end' | 'initial' | 'inherit' | string;
    aspectRatio?: string;
    backdropFilter?: string;
    backfaceVisibility?: 'visible' | 'hidden' | 'initial' | 'inherit';
    background?: string;
    backgroundAttachment?: 'scroll' | 'fixed' | 'local' | 'initial' | 'inherit';
    backgroundBlendMode?: 'normal' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'saturation' | 'color' | 'luminosity';
    backgroundClip?: 'border-box' | 'padding-box' | 'content-box' | 'initial' | 'inherit';
    backgroundColor?: string;
    backgroundImage?: string;
    backgroundOrigin?: 'padding-box' | 'border-box' | 'content-box' | 'initial' | 'inherit';
    backgroundPosition?: string;
    backgroundPositionX?: string;
    backgroundPositionY?: string;
    backgroundRepeat?: 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat' | 'space' | 'round' | 'initial' | 'inherit';
    backgroundSize?: string;
    blockSize?: string;
    border?: string;
    borderBlock?: string;
    borderBlockColor?: string;
    borderBlockEnd?: string;
    borderBlockEndColor?: string;
    borderBlockEndStyle?: CssBorderStyle;
    borderBlockEndWidth?: string;
    borderBlockStart?: string;
    borderBlockStartColor?: string;
    borderBlockStartStyle?: CssBorderStyle;
    borderBlockStartWidth?: string;
    borderBlockStyle?: CssBorderStyle;
    borderBlockWidth?: string;
    borderBottom?: string;
    borderBottomColor?: string;
    borderBottomLeftRadius?: string;
    borderBottomRightRadius?: string;
    borderBottomStyle?: CssBorderStyle;
    borderBottomWidth?: string;
    borderCollapse?: 'collapse' | 'separate' | 'initial' | 'inherit';
    borderColor?: string;
    borderEndEndRadius?: string;
    borderEndStartRadius?: string;
    borderImage?: string;
    borderImageOutset?: string;
    borderImageRepeat?: 'stretch' | 'repeat' | 'round' | 'space' | 'initial' | 'inherit';
    borderImageSlice?: string;
    borderImageSource?: string;
    borderImageWidth?: string;
    borderInline?: string;
    borderInlineColor?: string;
    borderInlineEnd?: string;
    borderInlineEndColor?: string;
    borderInlineEndStyle?: CssBorderStyle;
    borderInlineEndWidth?: string;
    borderInlineStart?: string;
    borderInlineStartColor?: string;
    borderInlineStartStyle?: CssBorderStyle;
    borderInlineStartWidth?: string;
    borderInlineStyle?: CssBorderStyle;
    borderInlineWidth?: string;
    borderLeft?: string;
    borderLeftColor?: string;
    borderLeftStyle?: CssBorderStyle;
    borderLeftWidth?: string;
    borderRadius?: string;
    borderRight?: string;
    borderRightColor?: string;
    borderRightStyle?: CssBorderStyle;
    borderRightWidth?: string;
    borderSpacing?: string;
    borderStartEndRadius?: string;
    borderStartStartRadius?: string;
    borderStyle?: CssBorderStyle;
    borderTop?: string;
    borderTopColor?: string;
    borderTopLeftRadius?: string;
    borderTopRightRadius?: string;
    borderTopStyle?: CssBorderStyle;
    borderTopWidth?: string;
    borderWidth?: string;
    bottom?: string;
    boxDecorationBreak?: 'slice' | 'clone' | 'initial' | 'inherit';
    boxReflect?: 'none' | 'below' | 'above' | 'left' | 'right' | 'initial' | 'inherit' | string;
    boxShadow?: string;
    boxSizing?: 'content-box' | 'border-box' | 'initial' | 'inherit';
    breakAfter?: 'auto' | 'all' | 'always' | 'avoid' | 'avoid-column' | 'avoid-page' | 'avoid-region' | 'column' | 'left' | 'page' | 'recto' | 'region' | 'right' | 'verso' | 'initial' | 'inherit';
    breakBefore?: 'auto' | 'all' | 'always' | 'avoid' | 'avoid-column' | 'avoid-page' | 'avoid-region' | 'column' | 'left' | 'page' | 'recto' | 'region' | 'right' | 'verso' | 'initial' | 'inherit';
    breakInside?: 'auto' | 'avoid' | 'avoid-column' | 'avoid-page' | 'avoid-region' | 'initial' | 'inherit';
    captionSide?: 'top' | 'bottom' | 'initial' | 'inherit';
    caretColor?: string;
    clear?: 'none' | 'left' | 'right' | 'both' | 'initial' | 'inherit';
    clip?: string;
    clipPath?: string;
    color?: string;
    columnCount?: string;
    columnFill?: 'balance' | 'auto' | 'initial' | 'inherit';
    columnGap?: string;
    columnRule?: string;
    columnRuleColor?: string;
    columnRuleStyle?: CssBorderStyle;
    columnRuleWidth?: string;
    columnSpan?: 'none' | 'all' | 'initial' | 'inherit';
    columnWidth?: string;
    columns?: string;
    content?: string;
    counterIncrement?: string;
    counterReset?: string;
    counterSet?: string;
    cursor?: 'alias' | 'all-scroll' | 'auto' | 'cell' | 'col-resize' | 'context-menu' | 'copy' | 'crosshair' | 'default' | 'e-resize' | 'ew-resize' | 'grap' | 'grabbing' | 'help' | 'move' | 'n-resize' | 'ne-resize' | 'nesw-resize' | 'ns-resize' | 'nw-resize' | 'nwse-resize' | 'no-drop' | 'none' | 'not-allowed' | 'pointer' | 'progress' | 'row-resize' | 's-resize' | 'se-resize' | 'sw-resize' | 'text' | 'vertical-text' | 'w-resize' | 'wait' | 'zoom-in' | 'zoom-out' | 'initial' | 'inherit';
    direction?: 'ltr' | 'rtl' | 'initial' | 'inherit';
    display?: 'inline' | 'block' | 'contents' | 'flex' | 'grid' | 'inline-block' | 'inline-flex' | 'inline-grid' | 'inline-table' | 'list-item' | 'run-in' | 'table' | 'table-caption' | 'table-column-group' | 'table-header-group' | 'table-footer-group' | 'table-row-group' | 'table-cell' | 'table-column' | 'table-row' | 'none' | 'initial' | 'inherit';
    emptyCells?: 'show' | 'hide' | 'initial' | 'inherit';
    filter?: string;
    flex?: string;
    flexBasis?: string;
    flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse' | 'initial' | 'inherit';
    flexFlow?: string;
    flexGrow?: string;
    flexShrink?: string;
    flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';
    float?: 'none' | 'left' | 'right' | 'initial' | 'inherit';
    font?: string;
    fontFamily?: string;
    fontFeatureSettings?: string;
    fontKerning?: 'auto' | 'normal' | 'none';
    fontSize?: string;
    fontSizeAdjust?: string;
    fontStretch?: 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded' | 'initial' | 'inherit';
    fontStyle?: 'normal' | 'italic' | 'oblique' | 'initial' | 'inherit';
    fontVariant?: 'normal' | 'small-caps' | 'initial' | 'inherit';
    fontVariantCaps?: 'normal' | 'small-caps' | 'all-small-caps' | 'petite-caps' | 'all-petite-caps' | 'unicase' | 'titling-caps' | 'initial' | 'inherit' | 'unset';
    fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'initial' | 'inherit';
    gap?: string;
    grid?: string;
    gridArea?: string;
    gridAutoColumns?: string;
    gridAutoFlow?: 'row' | 'column' | 'initial' | 'inherit' | string;
    gridAutoRows?: string;
    gridColumn?: string;
    gridColumnEnd?: string;
    gridColumnGap?: string;
    gridColumnStart?: string;
    gridGap?: string;
    gridRow?: string;
    gridRowEnd?: string;
    gridRowGap?: string;
    gridRowStart?: string;
    gridTemplate?: string;
    gridTemplateAreas?: string;
    gridTemplateColumns?: 'none' | 'auto' | 'max-content' | 'min-content' | 'initial' | 'inherit' | string;
    gridTemplateRows?: 'none' | 'auto' | 'max-content' | 'min-content' | string;
    hangingPunctuation?: 'none' | 'first' | 'last' | 'allow-end' | 'force-end' | 'initial' | 'inherit';
    height?: string;
    hyphens?: 'none' | 'manual' | 'auto' | 'initial' | 'inherit';
    hypenateCharacter?: 'auto' | 'string' | 'initial' | 'inherit';
    imageRendering?: 'auto' | 'smooth' | 'high-quality' | 'crisp-edges' | 'pixelated' | 'initial' | 'inherit';
    inlineSize?: string;
    inset?: string;
    insetBlock?: string;
    insetBlockEnd?: string;
    insetBlockStart?: string;
    insetInline?: string;
    insetInlineEnd?: string;
    insetInlineStart?: string;
    isolation?: 'auto' | 'isolate' | 'initial' | 'inherit';
    justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'initial' | 'inherit';
    justifyItems?: 'legacy' | 'normal' | 'stretch' | 'start' | 'left' | 'center' | 'end' | 'right' | 'overflow-alignment' | 'baseline alignment' | 'initial' | 'inherit';
    justifySelf?: 'auto' | 'normal' | 'stretch' | 'start' | 'left' | 'center' | 'end' | 'right' | 'overflow-alignment' | 'baseline alignment' | 'initial' | 'inherit';
    left?: string;
    letterSpacing?: string;
    lineHeight?: string;
    listStyle?: string;
    listStyleImage?: string;
    listStylePosition?: 'inside' | 'outside' | 'initial' | 'inherit';
    listStyleType?: 'disc' | 'armenian' | 'circle' | 'cjk-ideographic' | 'decimal' | 'decimal-leading-zero' | 'georgian' | 'hebrew' | 'hiragana' | 'hiragana-iroha' | 'katakana' | 'katakana-iroha' | 'lower-alpha' | 'lower-greek' | 'lower-latin' | 'lower-roman' | 'none' | 'square' | 'upper-alpha' | 'upper-greek' | 'upper-latin' | 'upper-roman' | 'initial' | 'inherit';
    margin?: string;
    marginBlock?: string;
    marginBlockEnd?: string;
    marginBlockStart?: string;
    marginBottom?: string;
    marginInline?: string;
    marginInlineEnd?: string;
    marginInlineStart?: string;
    marginLeft?: string;
    marginRight?: string;
    marginTop?: string;
    maskImage?: string;
    maskMode?: 'match-source' | 'luminance' | 'alpha' | 'initial' | 'inherit';
    maskOrigin?: 'border-box' | 'content-box' | 'padding-box' | 'margin-box	' | 'fill-box' | 'stroke-box' | 'view-box' | 'initial' | 'inherit';
    maskPosition?: string;
    maskRepeat?: 'repeat' | 'repeat-x' | 'repeat-y' | 'space' | 'round' | 'no-repeat' | 'initial' | 'inherit';
    maskSize?: string;
    maxHeight?: string;
    maxWidth?: string;
    maxBlockSize?: string;
    maxInlineSize?: string;
    minBlockSize?: string;
    minInlineSize?: string;
    minHeight?: string;
    minWidth?: string;
    minBlendMode?: 'normal' | 'multiply' | 'screen' | 'overlay' | 'darken' | 'lighten' | 'color-dodge' | 'color-burn' | 'difference' | 'exclusion' | 'hue' | 'saturation' | 'color' | 'luminosity';
    objectFit?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down' | 'initial' | 'inherit';
    objectPosition?: string;
    offset?: string;
    offsetAnchor?: string;
    offsetDistance?: string;
    offsetPath?: string;
    offsetRotate?: string;
    opacity?: string;
    order?: string;
    orphans?: string;
    outline?: string;
    outlineColor?: string;
    outlineOffset?: string;
    outlineStyle?: CssBorderStyle;
    outlineWidth?: string;
    overflow?: 'visible' | 'hidden' | 'clip' | 'scroll' | 'auto' | 'initial' | 'inherit';
    overflowAnchor?: 'auto' | 'none' | 'initial' | 'inherit';
    overflowWrap?: 'normal' | 'anywhere' | 'break-word' | 'initial' | 'inherit';
    overflowX?: 'visible' | 'hidden' | 'scroll' | 'auto' | 'initial' | 'inherit';
    overflowY?: 'visible' | 'hidden' | 'scroll' | 'auto' | 'initial' | 'inherit';
    overscrollBehavior?: 'auto' | 'contain' | 'none' | 'initial' | 'inherit';
    overscrollBehaviorBlock?: 'auto' | 'contain' | 'none' | 'initial' | 'inherit';
    overscrollBehaviorInline?: 'auto' | 'contain' | 'none' | 'initial' | 'inherit';
    overscrollBehaviorX?: 'auto' | 'contain' | 'none' | 'initial' | 'inherit';
    overscrollBehaviorY?: 'auto' | 'contain' | 'none' | 'initial' | 'inherit';
    padding?: string;
    paddingBlock?: string;
    paddingBlockEnd?: string;
    paddingBlockStart?: string;
    paddingBottom?: string;
    paddingInline?: string;
    paddingInlineEnd?: string;
    paddingInlineStart?: string;
    paddingLeft?: string;
    paddingRight?: string;
    paddingTop?: string;
    pageBreakAfter?: 'auto' | 'always' | 'avoid' | 'left' | 'right' | 'initial' | 'inherit';
    pageBreakBefore?: 'auto' | 'always' | 'avoid' | 'left' | 'right' | 'initial' | 'inherit';
    pageBreakInside?: 'auto' | 'avoid' | 'initial' | 'inherit';
    paintOrder?: string;
    perspective?: string;
    perspectiveOrigin?: string;
    placeContent?: 'normal' | 'stretch' | 'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'overflow-alignment' | 'initial' | 'inherit';
    placeItems?: 'normal legacy' | 'baseline' | 'center' | 'end' | 'start' | 'stretch' | 'initial' | 'inherit';
    placeSelf?: 'auto' | 'normal' | 'stretch' | 'start' | 'left' | 'center' | 'end' | 'right' | 'overflow-alignment' | 'baseline alignment' | 'initial' | 'inherit';
    pointerEvents?: 'auto' | 'none' | 'initial' | 'inherit';
    position?: 'static' | 'absolute' | 'fixed' | 'relative' | 'sticky' | 'initial' | 'inherit';
    quotes?: string;
    resize?: 'none' | 'both' | 'horizontal' | 'vertical' | 'initial' | 'inherit';
    right?: string;
    rotate?: string;
    rowGap?: string;
    scale?: string;
    scrollBehavior?: 'auto' | 'smooth' | 'initial' | 'inherit';
    scrollMargin?: string;
    scrollMarginBlock?: string;
    scrollMarginBlockEnd?: string;
    scrollMarginBlockStart?: string;
    scrollMarginBottom?: string;
    scrollMarginInline?: string;
    scrollMarginInlineEnd?: string;
    scrollMarginInlineStart?: string;
    scrollMarginLeft?: string;
    scrollMarginRight?: string;
    scrollMarginTop?: string;
    scrollPadding?: string;
    scrollPaddingBlock?: string;
    scrollPaddingBlockEnd?: string;
    scrollPaddingBlockStart?: string;
    scrollPaddingBottom?: string;
    scrollPaddingInline?: string;
    scrollPaddingInlineEnd?: string;
    scrollPaddingInlineStart?: string;
    scrollPaddingLeft?: string;
    scrollPaddingRight?: string;
    scrollPaddingTop?: string;
    scrollSnapAlign?: 'none' | 'start' | 'end' | 'center' | 'block inline' | 'initial' | 'inherit';
    scrollSnapStop?: 'none' | 'x' | 'y' | 'block' | 'inline' | 'both' | 'mandatory' | 'proximity' | 'initial' | 'inherit' | string;
    scrollSnapType?: 'none' | 'x' | 'y' | 'block' | 'inline' | 'both' | 'mandatory' | 'proximity' | 'initial' | 'inherit' | string;
    scrollbarColor?: string;
    tabSize?: string;
    tableLayout?: 'auto' | 'fixed' | 'initial' | 'inherit';
    textAlign?: 'left' | 'right' | 'center' | 'justify' | 'initial' | 'inherit';
    textAlignLast?: 'auto' | 'left' | 'right' | 'center' | 'justify' | 'start' | 'end' | 'initial' | 'inherit';
    textDecoration?: string;
    textDecorationColor?: string;
    textDecorationLine?: 'none' | 'underline' | 'overline' | 'line-through' | 'initial' | 'inherit';
    textDecorationStyle?: 'solid' | 'double' | 'dotted' | 'dashed' | 'wavy' | 'initial' | 'inherit';
    textDecorationThickness?: string;
    textEmphasis?: string;
    textEmphasisColor?: string;
    textEmphasisPosition?: string;
    textEmphasisStyle?: 'none' | 'filled' | 'open' | 'dot' | 'circle' | 'double-circle' | 'triangle' | 'sesame' | 'initial' | 'inherit' | string;
    textIndent?: string;
    textJustify?: 'auto' | 'inter-word' | 'inter-character' | 'none' | 'initial' | 'inherit';
    textOrientation?: 'mixed' | 'upright' | 'sideways' | 'sideways-right' | 'use-glyph-orientation' | 'initial' | 'inherit';
    textOverflow?: 'clip' | 'ellipsis' | 'initial' | 'inherit';
    textShadow?: string;
    textTransform?: 'none' | 'capitalize' | 'uppercase' | 'lowercase' | 'initial' | 'inherit';
    textUnderlineOffset?: string;
    textUnderlinePosition?: 'auto' | 'under' | 'left' | 'right' | 'initial' | 'inherit';
    top?: string;
    transform?: string;
    transformOrigin?: string;
    transformStyle?: string;
    transition?: string;
    transitionDelay?: string;
    transitionDuration?: string;
    transitionProperty?: string;
    transitionTimingFunction?: 'ease' | 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'step-start' | 'step-end' | 'initial' | 'inherit';
    translate?: string;
    unicodeBidi?: 'normal' | 'embed' | 'bidi-override' | 'isolate' | 'isolate-override' | 'plaintext' | 'initial' | 'inherit';
    userSelect?: 'auto' | 'none' | 'text' | 'all';
    verticalAlign?: 'baseline' | 'sub' | 'super' | 'top' | 'text-top' | 'middle' | 'bottom' | 'text-bottom' | 'initial' | 'inherit';
    visibility?: 'visible' | 'hidden' | 'collapse' | 'initial' | 'inherit';
    whiteSpace?: 'normal' | 'nowrap' | 'pre' | 'pre-line' | 'pre-wrap' | 'initial' | 'inherit';
    widows?: string;
    width?: string;
    wordBreak?: 'normal' | 'break-all' | 'keep-all' | 'break-word' | 'initial' | 'inherit';
    wordSpacing?: string;
    wordWrap?: 'normal' | 'break-word' | 'initial' | 'inherit';
    writingMode?: 'horizontal-tb' | 'vertical-rl' | 'vertical-lr';
    zIndex?: string;
    [key: string]: undefined | string;
}
type CssBorderStyle = 'none' | 'hidden' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset' | 'initial' | 'inherit' | string;

declare class Light {
    static get use(): typeof PluginManager.addPlugin;
    static get createElement(): typeof createElement;
    static get createSvgElement(): typeof createSvgElement;
    static get createStyle(): typeof createStyle;
    static setStyle(element: HTMLElement, name: string, value: number | string): void;
    private _Core;
    ListenerManager: export_default$6;
    TimerManager: export_default$5;
    constructor(element: HTMLElement, data?: any);
    get id(): string | undefined;
    get data(): any;
    get element(): HTMLElement;
    set data(value: any);
    getElementByID(id: string): undefined | HTMLElement;
    getElementsByClassName(className: string): HTMLElement[];
    getElementsByTagName(tagName: string): HTMLElement[];
    getAllElements(): HTMLElement[];
    load(html: string, componentPath?: string): void;
    remove(): void;
}

export { export_default$1 as Core, Light, type Plugin };
